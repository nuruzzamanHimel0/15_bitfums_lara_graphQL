# "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
# scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# "Indicates what fields are available at the top level of a query operation."
# type Query {
#     "Find a single user by an identifying attribute."
#     # user(
#     #   "Search by primary key."
#     #   id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#     #   "Search by email address."
#     #   email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     # ): User @find

#     user(id: ID @eq): User @find
#     users: [User!]! @all

#     # api:
#     # {
#     # user(id:3){
#     #     name
#     # }
#     # }


#     "List multiple users."
#     users(
#       "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#       name: String @where(operator: "like")
#     ): [User!]! @paginate(defaultCount: 10)
# }

# "Account of a person who utilizes this application."
# type User {
#     "Unique primary key."
#     id: ID!

#     "Non-unique name."
#     name: String!

#     "Unique email address."
#     email: String!

#     "When the email was verified."
#     email_verified_at: DateTime

#     "When the account was created."
#     created_at: DateTime!

#     "When the account was last updated."
#     updated_at: DateTime!
# }
############# Final Test ##############
# type Query{
#     users: [User!]! @all
#     usertwos: [Usertwo!]! @all

# }
# type Usertwo{
#     id: ID,
#     name: String,
#     email: String,
# }


##### lecture 2 ###

# type Query{
#     users: [User!]! @all
# }
# type User{
#     id: ID,
#     name: String,
#     email_verified_at: String!
# }
### API
# {
#   users{
#     id,
#     name
#   }
# }

#### lecture 4 (single user) ###
# type Query{
#     user(id: ID @eq): User @find
# }

# type User{
#     id: ID,
#     name: String,
#     email_verified_at: String!
# }

# #### API
# {
#   user(id:3){
#     id,
#     name
#   }
# }

#### lecture 5 (paginate)

# type Query{
#     # users: [User!]! @all
#     users: [User!]! @paginate
# }

# type User{
#     id: ID,
#     name: String,
#     email_verified_at: [String!
# }
# ####OUTPUT CALL:
# {
#   users(first:4,page:2){
#     data{
#       id,
#       name
#     },
#     paginatorInfo{
#       hasMorePages,
#       count,
#       total,
#       currentPage
#     }
#   }
# }

#### tut- 6 (Mutation of graphQL) ###


##### Create @@@@@@@@@
# type Mutation {
#   createUser(name: String!, email: String!, password: String!): User! @create
# }

# type User{
#     id: ID,
#     name: String,
#     email_verified_at: String!
# }
# #####Output:

# mutation {
#   createUser(name: "Donald",email:"Himel@gmail.com",password:"1234") {
#     id
#     name
#   }
# }

###### tut-7 (CRUD)
### update

# type Mutation {

#    updateUser(id: ID!, name: String): User @update
# }
# type User{
#     id: ID,
#     name: String,
#     email_verified_at: String!
# }
# ###Output:--
# mutation {
#   updateUser(id: "6", name: "Hillary") {
#     id
#     name
#   }
# }

#### delete

# type Mutation {
#      deleteUser(id: ID!): User @delete
# }

# type User{
#     id: ID,
#     name: String,
#     email: String,
#     email_verified_at: String!
# }
# ####OUTPUT:
# mutation {
#   deleteUser(id: "5") {
#     name
#   }
# }


#### upsert

# type Mutation {
#     upsertUser(id: ID!, name: String!, email: String!, password: String!): User @upsert
# }

# type User{
#     id: ID,
#     name: String,
#     email: String,
#     email_verified_at: String!
# }
# ####OUTPUT:
# mutation {
#   upsertUser(id: "10", name: "Hillary",email:"Hilly@gmail.com",password:"123556") {
#     id
#     name
#     email
#   }
# }



### tut - 8 (belongs to relationship)
# type Query{
#     users: [User!]! @paginate
#     user(id: ID @eq): User @find
#     posts: [Post!]! @all
# }

# type User{
#     id: ID,
#     name: String,
#     email: String,
#     email_verified_at: String!
# }
# type Post{
#     id: ID,
#     title: String,
#     content: String,
#     author: User! @belongsTo
# }


# ####OUTPUT:
# {
#   posts{
#     title,
#     content,
#     author{
#       name
#     }
#   }
# }

##### tut -9 (n + 1)

# type Query{
#     # users: [User!]! @all
#     users: [User!]! @paginate
#     user(id: ID @eq): User @find
#     posts: [Post!]! @all
# }

# type User{
#     id: ID,
#     name: String,
#     email: String,
#     email_verified_at: String!,
#     posts: [Post]! @hasMany
# }

# type Post{
#     id: ID,
#     title: String,
#     content: String,
#     author: User! @belongsTo
# }

# ###OUTPUT
# {
#     user(id:13){
#         id,
#         name,
#         posts{
#         title
#         }
#     }
# }

#### ( 10 ) Validation rule in graphql query

# type Mutation {
#   createUser(name: String!,
#   email: String! @rules(apply:["email","unique:users"]),
#    password: String! @rules(apply:["min:8"]) ): User! @create
# }

# type Post{
#     title: String,
#     content: String,
#     author: User! @belongsTo
# }

# type User {

#     id: ID!
#     name: String,
#     email: String,
#     email_verified_at: DateTime!,
#     posts: [Post]! @hasMany
# }

# #####OUTPUT:
# mutation {
#   createUser(name: "Donald",
#     email:"test14@gmail.com"
#     ,password:"123255888555") {
#     id
#     name
#   }
# }










